error : [text] => {
    '-->'; text; '\n';
    exit();
}

tokenise : [code] => {
    sq : false;
    dq : false;
    bcomment : False;
    l : [];
    o : '';
    p : '';
    t : '';
    for a : code.strip() {
        q : p;
        if a in alphabet do
            p : 'A';
        elif a in digits do
            p : 'D';
        elif a in symbols do
            p : 'S';
        elif a in whitespace do
            p : 'W';
        if (!q = p and !p = 'W' or p = 'S') and !(
            t in ('-', '+') and p = 'D'
        ) and !(
            t = '=' and a = '='
        ) and !(
            t = '=' and a = '>'
        ) and !(
            t = '>' and a = '='
        ) and !(
            t = '<' and a = '='
        ) and !(
            t = '+' and a = ':'
        ) and !(
            t = '-' and a = ':'
        ) and !(
            t = '*' and a = ':'
        ) and !(
            t = '/' and a = ':'
        ) and !(
            t = '_' and p = 'A'
        ) and !(
            q = 'A' and a = '_'
        ) and !(
            t = '_' and a = '_'
        ) and !(
            sq or dq or bcomment
        ) {
            l.append(o.strip());
            o : '';
        }
        if a = "'" and !(dq or bcomment) do
            sq : !sq;
        elif a = '"' and !(sq or bcomment) do
            dq : !dq;
        elif t = '/' and a = '*' and !(sq or dq) {
            l : l[:-1];
            bcomment : true;
        } elif t = '*' and a = '/' and !(sq or dq) {
            a : '';
            bcomment : false;
        }
        if !bcomment do
            o +: a;
        t : a;
    }
    out : list(filter(null, l + [o]));
    ret post_tokenise(out);
}

post_tokenise : [lst] => {
    if 'do' in lst {
        i : lst.index('do');
        lst[i] : '{' + ' '.join(lsst[i + 1:]) + '}';
        for i + 1 to len(lst) do
            lst.pop(#);
    }
    ret lst;
}

compile : [text] => {
    compiled : '';
    lines : tokenise(text);

    ret lines;
}

fKeys : 'write', 'exit', 'string';
fVals : 'print', 'sys.exit', 'str';
keywords : 'break', 'ret', 'yield';

this : argv(1);
if !this {
    'Input file not given.\n';
    exit();
}
this : os.path.abspath(this);

compiled : compile(readfile(this));
write(compiled);
exit();

cachedir : os.path.abspath('/'.join(os.path.split(this)[:-1]) + '/__mdclcache__');
cachefile : cachedir + '/' + os.path.splitext(os.path.basename(this))[0] + '.py';

if !os.path.isdir(cachedir) do
    :os.mkdir(cachedir);

code : readfile(this);
execScript : os.path.abspath(argv(0));
pcd : '/'.join(os.path.split(execScript)[:-1]) + '/__pcd__.py';

compiled : readfile(pcd) + '\n\n';
compiled +: compile(code);
compiled : compiled.strip() + '\n';

:writefile(cachefile, compiled);

:sys.path.insert(0, cachedir);
write(os.path.splitext(os.path.basename(cachefile))[0]);
sys.argv : sys.argv[1:];
:exec('import ' + os.path.splitext(os.path.basename(cachefile))[0]);
